import numpy as np
import scipy as sp
import qutip as qt
from ylp import *
from scipy import integrate
from functools import partial, partialmethod

def arnoldi(A, b): 
    """
    Construct orthonormal basis of m-order Krylov subspace generated by images of b under A: span{b, Ab, ..., A^(m-1)b} using the Arnoldi algorithm.

    Parameters
    ----------
    A : ndarray
        n x m.
    b : ndarray
        1 x m.

    Returns
    -------
    V : ndarray
        m x m matrix whose columns form an orthonormal basis of the Krylov subspace.
    H : ndarray
        m x m upper Hessenberg matrix.
    """
    m = A.shape[0]
    V = np.zeros((m, m), dtype = 'complex_')
    H = np.zeros((m, m), dtype = 'complex_')
    
    V[:, 0] = b / np.linalg.norm(b, 2)

    for j in range(1, m + 1):
        w = np.dot(A, V[:, j-1])

        for i in range(1, j+1):
            H[i-1, j-1] = np.dot(V[:, i-1].conj(), w)
            w = w - H[i-1, j-1]*V[:, i-1]
        
        if (j != m):
            H[j, j-1] = np.linalg.norm(w, 2)
            
            if H[j, j-1] > 1e-12:
                V[:, j] = w / H[j, j-1]
            else:
                return V, H

    return V, H

def lanczos(A, b):
    """
    Given Hermitian matrix A, construct orthonormal basis of m-order Krylov subspace generated by images of b under A: span{b, Ab, ..., A^(m-1)b} using the Lanczos algorithm.

    Parameters
    ----------
    A : ndarray
        m x m, Hermitian 
    b : ndarray
        1 x m, treated as column vector.

    Returns
    -------
    V : ndarray
        m x m matrix whose columns form an orthonormal basis of the Krylov subspace.
    T : ndarray
        m x m Tridiagonal matrix
    """
    m = A.shape[0]
    V = np.zeros((m, m), dtype = 'complex_')
    alpha = np.zeros((m,1), dtype = 'complex_')
    beta = np.zeros((m,1), dtype = 'complex_')

    W = np.zeros((m, m), dtype = 'complex_')

    V[:, 0] = b / np.linalg.norm(b)
    w_ = A @ V[:,0]
    alpha[0] = np.dot(w_.conj(),V[:,0])
    W[:,0] = w_ - alpha[0]*V[:,0]

    for j in range(2,m+1):
        beta[j-1] = np.linalg.norm(W[:,j-2])
        V[:, j-1] = W[:, j-2] / beta[j-1]
        w_ = A @ V[:, j-1]
        alpha[j-1] = np.dot(w_.conj(), V[:, j-1])
        W[:, j-1] = w_ - alpha[j-1]*V[:,j-1] - beta[j-1]*V[:,j-2]

    return V, np.diagflat(alpha) + np.diagflat(beta[1:], 1) + np.diagflat(beta[1:], -1)

def matrix_exp_padé(A, p, q):
    """
    Approximation of matrix exponential of A using (p,q) Padé approximants.

    Parameters
    ----------
    A : ndarray
        Square matrix.
    p : int
        Order of numerator of approximant.
    q : int
        Order of denominator of approximant.

    Returns
    -------
    ndarray
        The Padé approximant of exp(A)
    """
    N = 0
    D = 0

    f_p = sp.special.factorial(p)
    f_q = sp.special.factorial(q)
    f_p_q = sp.special.factorial(p+q)

    for i in range(0,p+1):
        N += ((sp.special.factorial(p + q - i) * f_p) / (f_p_q * sp.special.factorial(i) * sp.special.factorial(p-i))) * np.linalg.matrix_power(A,i)
    
    for i in range(0,q+1):
        D += ((sp.special.factorial(p + q - i) * f_q) / (f_p_q * sp.special.factorial(i) * sp.special.factorial(q-i))) * np.linalg.matrix_power(-A,i)
    
    return np.dot(np.linalg.inv(D),N)

def matrix_exp_krylov(A, b):
    """
    Approximation of matrix exponential of A multiplied by b using Krylov subspaces.

    Parameters
    ----------
    A : ndarray
        n x n matrix.
    b : ndarray
        n x 1

    Returns
    -------
    ndarray
        n x 1,  e^A * b
    """
    if (np.array_equal(A.conj().T, A)):
        V, H = lanczos(A, b) # more efficient for Hermitian matrix
    else:
        V, H = arnoldi(A, b)

    return np.linalg.norm(b) * V @ matrix_exp_padé(H, 8, 8) @ np.identity(A.shape[0])[:,0]

# wip
def integral(f, a, b):
    return integrate.quad(f, a, b)[0]